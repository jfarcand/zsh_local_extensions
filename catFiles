#!/usr/bin/env bash

# Check if any arguments were provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 [--root path] [--includes ext1,ext2] [--excludes dir1,dir2] [--extra ext1,ext2] [paths...]"
    exit 1
fi

# Initialize variables
ROOT=""
INCLUDES=()
EXCLUDE_DIRS=()
EXTENSIONS=(".ts")  # Default to .ts files
PATHS=()

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --root)
            ROOT="$2"
            shift 2
            ;;
        --includes)
            IFS=',' read -ra INCLUDES <<< "$2"
            shift 2
            ;;
        --excludes)
            IFS=',' read -ra EXCLUDE_DIRS <<< "$2"
            shift 2
            ;;
        --extra)
            IFS=',' read -ra EXTENSIONS <<< "$2"
            shift 2
            ;;
        *)
            PATHS+=("$1")
            shift
            ;;
    esac
done

# Function to check if path should be excluded
is_excluded() {
    local file="$1"
    for exclude in "${EXCLUDE_DIRS[@]}"; do
        if [[ "$file" == "$exclude"* ]]; then
            return 0
        fi
    done
    return 1
}

# Function to check if file has a valid extension
has_valid_extension() {
    local file="$1"
    for ext in "${EXTENSIONS[@]}"; do
        if [[ "$file" == *"$ext" ]]; then
            return 0
        fi
    done
    return 1
}

# Function to process a single file
process_file() {
    local file="$1"
    if [ -f "$file" ] && ! is_excluded "$file" && has_valid_extension "$file"; then
        echo "// $file"
        cat "$file"
        echo ""
    fi
}

# Function to process a folder recursively
process_folder() {
    local folder="$1"
    if is_excluded "$folder"; then
        return
    fi

    # Build exclusion pattern for `find`
    local find_exclude_args=()
    for exclude in "${EXCLUDE_DIRS[@]}"; do
        find_exclude_args+=(-path "$folder/$exclude" -prune -o)
    done

    # Build extension pattern for `find`
    local find_extension_args=()
    for ext in "${EXTENSIONS[@]}"; do
        find_extension_args+=(-name "*$ext" -o)
    done
    unset 'find_extension_args[-1]'  # Remove last '-o'

    # Find files and process them
    find "$folder" "${find_exclude_args[@]}" -type f \( "${find_extension_args[@]}" \) -print | while IFS= read -r file; do
        process_file "$file"
    done
}

# Function to process named files with includes
process_named_files() {
    local file_path="$1"
    local name=$(basename "$file_path" .ts)
    local dir="$ROOT"
    
    declare -a files
    
    # Add the original file
    files+=("$file_path")
    
    # Add included types
    for include in "${INCLUDES[@]}"; do
        files+=("$dir/$include/$name.$include.ts")
    done
    
    # Output concatenated files
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            echo "// $file"
            cat "$file"
            echo ""
        fi
    done
}

# Process each provided path
for path in "${PATHS[@]}"; do
    if [ -f "$path" ]; then
        process_file "$path"
    elif [ -d "$path" ]; then
        process_folder "$path"
    elif [ -n "$ROOT" ]; then
        process_named_files "$ROOT/$path"
    fi
done

