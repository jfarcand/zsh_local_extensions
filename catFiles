#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# catFiles: A Bash script to concatenate and display files with optional schema lookup
# -----------------------------------------------------------------------------
# Usage:
#   catFiles [--root path] [--includes ext1,ext2] [--excludes dir1,dir2] 
#            [--extra ext1,ext2] [--extensions ext1,ext2] [--grep pattern] 
#            [--withSchema schema.prisma] [paths...]
#
# Description:
#   This script processes files, concatenating and displaying their contents 
#   based on specified criteria. It supports filtering by file extensions, 
#   excluding directories, and searching for filenames containing a specific 
#   string (via --grep). It can also include relevant Prisma model definitions 
#   from a schema file if `--withSchema` is used.
#
# Options:
#   --root path         Set a root directory to prepend to file paths.
#   --includes ext1,ext2
#                       Include only specific file extensions (comma-separated).
#   --excludes dir1,dir2
#                       Exclude specific directories from processing.
#   --extra ext1,ext2   Include additional related files (e.g., inputs, types).
#   --extensions ext1,ext2
#                       Set allowed file extensions (default: .ts, .tsx).
#   --grep pattern      Filter filenames containing a specific pattern.
#   --withSchema schema.prisma
#                       Look up corresponding model definitions from schema.
#   paths...            Files or directories to process.
#
# -----------------------------------------------------------------------------

# Check if any arguments were provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 [--root path] [--includes ext1,ext2] [--excludes dir1,dir2] [--extra ext1,ext2] [--extensions ext1,ext2] [--grep pattern] [--withSchema schema.prisma] [paths...]"
    exit 1
fi

# Initialize variables
ROOT=""
INCLUDES=()
EXCLUDE_DIRS=()
EXTENSIONS=(".ts" ".tsx")  # Default to .ts and .tsx files
EXTRA_EXTENSIONS=() # Extra file types (inputs, types, etc.)
PATHS=()
GREP_PATTERN=""  # Store grep pattern
SCHEMA_FILE=""  # Store schema file path

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --root)
            ROOT="$2"
            shift 2
            ;;
        --includes)
            IFS=',' read -ra INCLUDES <<< "$2"
            shift 2
            ;;
        --excludes)
            IFS=',' read -ra EXCLUDE_DIRS <<< "$2"
            shift 2
            ;;
        --extra)
            IFS=',' read -ra EXTRA_EXTENSIONS <<< "$2"
            shift 2
            ;;
        --extensions)
            IFS=',' read -ra EXTENSIONS <<< "$2"
            shift 2
            ;;
        --grep)
            GREP_PATTERN="$2"
            shift 2
            ;;
        --withSchema)
            SCHEMA_FILE="$2"
            shift 2
            ;;
        *)
            PATHS+=("$1")
            shift
            ;;
    esac
done

# Function to find model definition in schema.prisma
find_model_in_schema() {
    local modelName="$1"
    local schema="$2"

    if [[ -f "$schema" ]]; then
        awk -v model="model $modelName {" '
        $0 ~ model { capture=1 } capture;
        capture && /^}/ { capture=0; print ""; exit }
        ' "$schema"
    fi
}

# Function to check if path should be excluded
is_excluded() {
    local file="$1"
    for exclude in "${EXCLUDE_DIRS[@]}"; do
        if [[ "$file" == "$exclude"* ]]; then
            return 0
        fi
    done
    return 1
}

# Function to check if file has a valid extension
has_valid_extension() {
    local file="$1"
    for ext in "${EXTENSIONS[@]}" "${EXTRA_EXTENSIONS[@]}"; do
        if [[ "$file" == *"$ext" ]]; then
            return 0
        fi
    done
    return 1
}

# Function to filter files by grep pattern
matches_grep_pattern() {
    local file="$1"
    if [[ -n "$GREP_PATTERN" ]]; then
        if [[ "$file" != *"$GREP_PATTERN"* ]]; then
            return 1  # File doesn't match grep pattern
        fi
    fi
    return 0  # No grep pattern or file matches
}

# Function to process a single file
process_file() {
    local file="$1"
    local baseName=$(basename "$file" | cut -d '.' -f1)

    if [ -f "$file" ] && ! is_excluded "$file" && has_valid_extension "$file" && matches_grep_pattern "$file"; then
        # Include Prisma model if --withSchema is provided
        if [[ -n "$SCHEMA_FILE" ]]; then
            local capitalizedBaseName="$(tr '[:lower:]' '[:upper:]' <<< "${baseName:0:1}")${baseName:1}"
            local modelDefinition=$(find_model_in_schema "$capitalizedBaseName" "$SCHEMA_FILE")

            if [[ -n "$modelDefinition" ]]; then
                echo "$modelDefinition"
            fi
        fi

        echo "// $file"
        cat "$file"
        echo ""
    fi
}

# Process each provided path
for path in "${PATHS[@]}"; do
    if [ -f "$path" ]; then
        process_file "$path"
    elif [ -d "$path" ]; then
        find "$path" -type f -print | while IFS= read -r file; do
            process_file "$file"
        done
    fi
done
