#!/usr/bin/env bash

# Check if any arguments were provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 [--root path] [--includes ext1,ext2] [--excludes dir1,dir2] [--extra ext1,ext2] [--extensions ext1,ext2] [paths...]"
    exit 1
fi

# Initialize variables
ROOT=""
INCLUDES=()
EXCLUDE_DIRS=()
EXTENSIONS=(".ts")  # Default to .ts files
EXTRA_EXTENSIONS=() # Extra file types (inputs, types, etc.)
PATHS=()

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --root)
            ROOT="$2"
            shift 2
            ;;
        --includes)
            IFS=',' read -ra INCLUDES <<< "$2"
            shift 2
            ;;
        --excludes)
            IFS=',' read -ra EXCLUDE_DIRS <<< "$2"
            shift 2
            ;;
        --extra)
            IFS=',' read -ra EXTRA_EXTENSIONS <<< "$2"
            shift 2
            ;;
        --extensions)
            IFS=',' read -ra EXTENSIONS <<< "$2"
            shift 2
            ;;
        *)
            PATHS+=("$1")
            shift
            ;;
    esac
done

# Function to check if path should be excluded
is_excluded() {
    local file="$1"
    for exclude in "${EXCLUDE_DIRS[@]}"; do
        if [[ "$file" == "$exclude"* ]]; then
            return 0
        fi
    done
    return 1
}

# Function to check if file has a valid extension
has_valid_extension() {
    local file="$1"
    for ext in "${EXTENSIONS[@]}" "${EXTRA_EXTENSIONS[@]}"; do
        if [[ "$file" == *"$ext" ]]; then
            return 0
        fi
    done
    return 1
}

# Function to find and include related files for --extra inputs,types
find_related_files() {
    local base_file="$1"
    local dir=$(dirname "$base_file")
    local name=$(basename "$base_file" .resolver.ts)

    for extra in "${EXTRA_EXTENSIONS[@]}"; do
        if [[ "$extra" == "inputs" ]]; then
            input_file="$dir/input/${name}.inputs.ts"
            [[ -f "$input_file" ]] && PATHS+=("$input_file")
        fi
        if [[ "$extra" == "types" ]]; then
            type_file="$dir/types/${name}.types.ts"
            [[ -f "$type_file" ]] && PATHS+=("$type_file")
        fi
    done
}

# Function to process a single file
process_file() {
    local file="$1"
    if [ -f "$file" ] && ! is_excluded "$file" && has_valid_extension "$file"; then
        echo "// $file"
        cat "$file"
        echo ""
    fi
}

# Function to process a folder recursively
process_folder() {
    local folder="$1"
    if is_excluded "$folder"; then
        return
    fi

    # Build exclusion pattern for `find`
    local find_exclude_args=()
    for exclude in "${EXCLUDE_DIRS[@]}"; do
        find_exclude_args+=(-path "$folder/$exclude" -prune -o)
    done

    # Build extension pattern for `find`
    local find_extension_args=()
    for ext in "${EXTENSIONS[@]}" "${EXTRA_EXTENSIONS[@]}"; do
        find_extension_args+=(-name "*$ext" -o)
    done
    unset 'find_extension_args[-1]'  # Remove last '-o'

    # Find files and process them
    find "$folder" "${find_exclude_args[@]}" -type f \( "${find_extension_args[@]}" \) -print | while IFS= read -r file; do
        process_file "$file"
    done
}

# Expand file list based on --extra inputs,types
for file in "${PATHS[@]}"; do
    find_related_files "$file"
done

# If a root directory is specified, prepend it to file paths
if [ -n "$ROOT" ]; then
    for i in "${!PATHS[@]}"; do
        PATHS[$i]="$ROOT/${PATHS[$i]}"
    done
fi

# Process each provided path
for path in "${PATHS[@]}"; do
    if [ -f "$path" ]; then
        process_file "$path"
    elif [ -d "$path" ]; then
        process_folder "$path"
    fi
done
