#!/usr/bin/env zsh

# -----------------------------------------------------------------------------
# catAllFilesPlus: Extends catAllFiles with ability to include a common file
# -----------------------------------------------------------------------------
# Usage:
#   catAllFilesPlus [--include-file <file>] [--outDir <dir>] [catAllFiles options]
#
# Options:
#   --include-file <file>  File to include at the beginning of every output file
#   --outDir <dir>         Where to save output files (defaults to ~/Downloads)
#   [catAllFiles options]  Any options normally accepted by catAllFiles
#
# Example:
#   catAllFilesPlus --include-file stores/createGraphQLStore.ts --extra services/api/graphql/queries,services/api/graphql/mutations stores
# -----------------------------------------------------------------------------

# Function to log with timestamp
log_with_timestamp() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log_with_timestamp "Starting catAllFilesPlus..."

# Parse arguments to find the --include-file parameter
INCLUDE_FILE=""
OUT_DIR=~/Downloads  # Default
TEMP_DIR=""
CATALLFILES_ARGS=()

# Process arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --include-file)
            INCLUDE_FILE="$2"
            if [ ! -f "$INCLUDE_FILE" ]; then
                log_with_timestamp "Error: Include file '$INCLUDE_FILE' not found"
                exit 1
            fi
            shift 2
            ;;
        --outDir)
            OUT_DIR="$2"
            # Don't add to CATALLFILES_ARGS, as we'll use our own temp dir
            shift 2
            ;;
        *)
            CATALLFILES_ARGS+=("$1")
            shift
            ;;
    esac
done

if [[ -z "$INCLUDE_FILE" ]]; then
    log_with_timestamp "Error: --include-file parameter is required"
    log_with_timestamp "Usage: catAllFilesPlus --include-file <file> [--outDir <dir>] [catAllFiles options]"
    exit 1
fi

# Create output directory
mkdir -p "$OUT_DIR"
log_with_timestamp "Output files will be saved to: $OUT_DIR"

# Create temp directory
TEMP_DIR=$(mktemp -d)
log_with_timestamp "Using temporary directory: $TEMP_DIR"

# Ensure cleanup on exit
trap 'log_with_timestamp "Cleaning up..."; rm -rf "$TEMP_DIR"; exit' EXIT INT TERM

# Start catAllFiles in the background, redirecting to temp dir
log_with_timestamp "Starting catAllFiles in the background..."
catAllFiles "${CATALLFILES_ARGS[@]}" --outDir "$TEMP_DIR" &
CATALLFILES_PID=$!

# Track processed files to avoid duplicates
PROCESSED_FILES=()

# Function to check if a file has been processed before
is_processed() {
    local file="$1"
    for processed in "${PROCESSED_FILES[@]}"; do
        if [[ "$processed" == "$file" ]]; then
            return 0
        fi
    done
    return 1
}

# Function to process a new or updated file
process_file() {
    local input_file="$1"
    local base_name=$(basename "$input_file")
    local output_file="$OUT_DIR/$base_name"
    
    # Skip if this exact file has been processed before with the same timestamp
    local file_mod_time=$(stat -f "%m" "$input_file" 2>/dev/null || stat -c "%Y" "$input_file" 2>/dev/null)
    local file_key="${base_name}:${file_mod_time}"
    
    if is_processed "$file_key"; then
        return
    fi
    
    # Add to processed list
    PROCESSED_FILES+=("$file_key")
    
    # Process file by adding include file
    {
        echo "// Common include from: $INCLUDE_FILE"
        echo "// Generated by catAllFilesPlus at $(date)"
        echo ""
        cat "$INCLUDE_FILE"
        echo ""
        echo "// Original content follows"
        echo ""
        cat "$input_file"
    } > "$output_file"
    
    log_with_timestamp "âœ¨ Enhanced file saved to: $output_file"
}

log_with_timestamp "Starting file monitoring..."
log_with_timestamp "Press Ctrl+C to stop."

# Initial processing of any files that might be created right away
sleep 2
for f in "$TEMP_DIR"/*-code.ts; do
    if [[ -f "$f" ]]; then
        process_file "$f"
    fi
done

# Monitor temp directory for changes using inotifywait if available,
# otherwise fall back to polling
if command -v inotifywait >/dev/null 2>&1; then
    log_with_timestamp "Using filesystem events for monitoring"
    while true; do
        inotifywait -q -e create -e modify "$TEMP_DIR" >/dev/null 2>&1
        for f in "$TEMP_DIR"/*-code.ts; do
            if [[ -f "$f" ]]; then
                process_file "$f"
            fi
        done
    done
else
    log_with_timestamp "Using polling for monitoring (every 1 second)"
    while true; do
        sleep 1
        for f in "$TEMP_DIR"/*-code.ts; do
            if [[ -f "$f" ]]; then
                process_file "$f"
            fi
        done
    done
fi